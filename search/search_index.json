{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Interoperability","text":""},{"location":"#interoperability","title":"Interoperability","text":""},{"location":"#sections","title":"Sections:","text":""},{"location":"#rans","title":"RANs:","text":"<ul> <li>OpenAirInterface</li> <li>srsRAN</li> </ul>"},{"location":"#core-network","title":"Core Network:","text":"<ul> <li>Open5GS</li> <li>OpenAirInterface-CN</li> <li>Free5GC</li> </ul>"},{"location":"#rics","title":"RICs:","text":"<ul> <li>Flexric</li> <li>ORAN-SC</li> </ul> <p>The authors would like to thank the S\u00e3o Paulo Research Foundation (FAPESP) for their support through the projects PORVIR-5G: Programmability, Orchestration, and Virtualization of Networks in 5G, grant number 2020/05182-3, and SAMURAI: intelligent 5G core and integration of multiple access networks, grant number 20/05127-2.</p> <p>The opinions, hypotheses, conclusions, or recommendations expressed in this material are the responsibility of the author(s) and do not necessarily reflect the views of FAPESP.</p>"},{"location":"paper/","title":"Published Paper","text":""},{"location":"paper/#published-paper","title":"Published Paper","text":""},{"location":"Core-Network/free5gc/","title":"Free5GC","text":""},{"location":"Core-Network/free5gc/#free5gc","title":"Free5GC","text":""},{"location":"Core-Network/free5gc/#1-set-up","title":"1. Set Up","text":"<p>In our test we used the version v3.3.0.</p>"},{"location":"Core-Network/free5gc/#11-core-host-configurations","title":"1.1 Core-host Configurations","text":"<pre><code>sudo sysctl net.ipv4.conf.all.forwarding=1\nsudo iptables -P FORWARD ACCEPT\n</code></pre>"},{"location":"Core-Network/free5gc/#12-clone-free5gc-compose","title":"1.2 Clone free5gc-compose","text":"<pre><code>git clone https://github.com/free5gc/free5gc-compose\ngit checkout v3.3.0\ngit submodule update --init --recursive\n</code></pre>"},{"location":"Core-Network/free5gc/#13-changing-core-settings","title":"1.3 Changing Core Settings","text":"<pre><code>git clone https://github.com/eduardoschulz/Interoperabilidade.git\ncd Interoperabilidade/core-networks/free5gc/core-networks/FREE5GC\ncp -r config path/to/free5gc-compose \n</code></pre>"},{"location":"Core-Network/free5gc/#14-gnb-host-configurations","title":"1.4 gNB-host Configurations","text":"<p>You also must configure a route to the internal docker network so that the gNB can make a connection.</p> <pre><code>sudo ip route add 10.100.200.0/24 via {ip_addr_corehost} dev {interface}\n\n#example\nsudo ip route add 10.100.200.0/24 via 191.4.205.38 dev br01\n</code></pre>"},{"location":"Core-Network/free5gc/#20-installing-gtp-u-kernel-module","title":"2.0 Installing GTP-U Kernel Module","text":"<pre><code>git clone https://github.com/free5gc/gtp5g.git &amp;&amp; cd gtp5g\nmake clean &amp;&amp; make\nsudo make install\n</code></pre>"},{"location":"Core-Network/free5gc/#30-deploying-the-core-network","title":"3.0 Deploying the Core Network","text":"<ul> <li>To start the core <pre><code>cd path-to/free5gc-compose\ndocker compose up -d\n</code></pre></li> <li>To stop the core <pre><code>docker compose down \n</code></pre></li> </ul>"},{"location":"Core-Network/free5gc/#31-adding-ue-to-core-database","title":"3.1 Adding UE to Core Database","text":"<p>To set up your UEs you'll need to go to the free5gc webpage on your machine. You should see a login screen when accessing http://:3000. The credentials are admin and the password is free5gc.</p>"},{"location":"Core-Network/free5gc/#40-more-information","title":"4.0 More Information","text":"<p>Free5GC - Github Page Free5GC - Compose Free5GC - Forum</p>"},{"location":"Core-Network/oaicn/","title":"OAI - Core Network","text":""},{"location":"Core-Network/oaicn/#oai-core-network","title":"OAI - Core Network","text":""},{"location":"Core-Network/oaicn/#1-set-up","title":"1. Set Up","text":"<p>For our test the version 1.5.0 was used.</p>"},{"location":"Core-Network/oaicn/#11-core-host-configurations","title":"1.1 Core-host Configurations","text":"<pre><code>sudo sysctl net.ipv4.conf.all.forwarding=1\nsudo iptables -P FORWARD ACCEPT\n</code></pre>"},{"location":"Core-Network/oaicn/#12-clone-oai-cn5g-fed","title":"1.2 Clone oai-cn5g-fed","text":"<pre><code>git clone https://gitlab.eurecom.fr/oai/cn5g/oai-cn5g-fed.git\ngit checkout v1.5.0\n</code></pre>"},{"location":"Core-Network/oaicn/#13-changing-core-settings","title":"1.3 Changing Core Settings","text":"<pre><code>git clone https://github.com/eduardoschulz/Interoperabilidade.git\ncd Interoperabilidade/core-networks/OAI-CN/\n\n\nmv docker-compose-basic-nrf.yaml ~/oai-cn5g-fed/docker-compose/\n</code></pre>"},{"location":"Core-Network/oaicn/#14-gnb-host-configurations","title":"1.4 gNB-host Configurations","text":"<p>You also must configure a route to the internal docker network so that the gNB can make a connection.</p> <pre><code>sudo ip route add 192.168.70.128/26 via {ip_addr_corehost} dev {interface}\n\n#example\nsudo ip route add 192.168.70.128/26 via 191.4.205.38 dev br01\n</code></pre>"},{"location":"Core-Network/oaicn/#20-deploying-the-core-network","title":"2.0 Deploying the Core Network","text":"<ul> <li>To start the core <pre><code>cd path-to/oai-cn5g-fed/docker-compose\npython3 core-networks.py --type start-basic --scenario 1\n</code></pre></li> <li>To stop the core <pre><code>python3 core-networks.py --type stop-basic --scenario 1\n</code></pre></li> </ul>"},{"location":"Core-Network/oaicn/#21-adding-ue-to-core-database","title":"2.1 Adding UE to Core Database","text":"<pre><code>docker exec -it mysql bash\nmysql -u root -p\n\npassword: linux \n</code></pre> <pre><code>use oai_db;\nINSERT INTO `AuthenticationSubscription` (`ueid`, `authenticationMethod`, `encPermanentKey`, `protectionParameterId`, `sequenceNumber`, `authenticationManagementField`, `algorithmId`, `encOpcKey`, `encTopcKey`, `vectorGenerationInHss`, `n5gcAuthMethod`, `rgAuthenticationInd`, `supi`) VALUES\n('001010123456789', '5G_AKA', '41B7157E3337F0ADD8DA89210D89E17F', '41B7157E3337F0ADD8DA89210D89E17F', '{\\\"sqn\\\": \\\"000000000020\\\", \\\"sqnScheme\\\": \\\"NON_TIME_BASED\\\", \\\"lastIndexes\\\": {\\\"ausf\\\": 0}}', '8000', 'milenage', '1CD638FC96E02EBD35AA0D41EB6F812F', NULL, NULL, NULL, NULL, '001010123456789');\n\nINSERT INTO `SessionManagementSubscriptionData` (`ueid`, `servingPlmnid`, `singleNssai`, `dnnConfigurations`) VALUES\n('001010123456789', '00101', '{\\\"sst\\\": 222, \\\"sd\\\": \\\"123\\\"}','{\\\"default\\\":{\\\"pduSessionTypes\\\":{ \\\"defaultSessionType\\\": \\\"IPV4\\\"},\\\"sscModes\\\": {\\\"defaultSscMode\\\": \\\"SSC_MODE_1\\\"},\\\"5gQosProfile\\\": {\\\"5qi\\\": 6,\\\"arp\\\":{\\\"priorityLevel\\\": 1,\\\"preemptCap\\\": \\\"NOT_PREEMPT\\\",\\\"preemptVuln\\\":\\\"NOT_PREEMPTABLE\\\"},\\\"priorityLevel\\\":1},\\\"sessionAmbr\\\":{\\\"uplink\\\":\\\"1000Mbps\\\", \\\"downlink\\\":\\\"1000Mbps\\\"},\\\"staticIpAddress\\\":[{\\\"ipv4Addr\\\": \\\"12.1.1.4\\\"}]}}');\n</code></pre> The configuration above is only going to last until the core is restarted. If you want to make this static you must make changes on the db files inside path/oaicn/docker-compose/databases/. <p>If you want to use ours:</p> <pre><code>rm -r ~/oai-cn5g-fed/docker-compose/database\ncp -r database ~/oai-cn5g-fed/docker-compose/database\n</code></pre>"},{"location":"Core-Network/oaicn/#30-more-information","title":"3.0 More Information","text":"<p>Basic Deployment using Docker Compose</p>"},{"location":"Core-Network/open5gs/","title":"Open5GS","text":""},{"location":"Core-Network/open5gs/#open5gs","title":"Open5GS","text":""},{"location":"Core-Network/open5gs/#1-set-up","title":"1. Set Up","text":"<p>In our test we used the version v2.7.0</p>"},{"location":"Core-Network/open5gs/#11-core-host-configurations","title":"1.1 Core-host Configurations","text":"<pre><code>sudo sysctl net.ipv4.conf.all.forwarding=1\nsudo iptables -P FORWARD ACCEPT\n</code></pre>"},{"location":"Core-Network/open5gs/#12-clone-docker_open5gs","title":"1.2 Clone docker_open5gs","text":"<pre><code>git clone https://github.com/herlesupreeth/docker_open5gs\ngit checkout v2.7.0\n</code></pre>"},{"location":"Core-Network/open5gs/#13-changing-core-settings","title":"1.3 Changing Core Settings","text":"<pre><code>git clone https://github.com/eduardoschulz/Interoperabilidade.git\ncd Interoperabilidade/core-networks/OPEN5GS\ncp sa-deploy.yaml /path/to/docker_open5gs/.\ncp .env /path/to/docker_open5gs/. \n\ncp -r smf/ /path/to/docker_open5gs/ #here you need to modify your dnn \ncp -r upf/ /path/to/docker_open5gs/ #same thing as above\n</code></pre>"},{"location":"Core-Network/open5gs/#20-deploying-the-core-network","title":"2.0 Deploying the Core Network","text":"<ul> <li>To start the core <pre><code>cd path-to/docker_open5gs\ndocker compose -f sa-deploy.yaml up -d\n</code></pre></li> <li>To stop the core <pre><code>docker compose down \n</code></pre></li> </ul>"},{"location":"Core-Network/open5gs/#31-adding-ue-to-core-database","title":"3.1 Adding UE to Core Database","text":"<p>To set up your UEs you'll need to go to the open5gs webpage on your machine. You should see a login screen when accessing http://:3000. The credentials are admin and the password is 1423.</p>"},{"location":"Core-Network/open5gs/#40-more-information","title":"4.0 More Information","text":"<p>Open5GS - Docker Open5GS - Documentation Open5GS - Github Page srsRAN - Docker; Gradiant - Open5gs in k8s.</p>"},{"location":"RANs/oai/","title":"OpenAirInterface","text":""},{"location":"RANs/oai/#openairinterface","title":"OpenAirInterface","text":"<p>For our testing we used the 2.1 release of the project.</p>"},{"location":"RANs/oai/#how-to-build","title":"How to Build","text":"<ul> <li>UHD - Build Instructions</li> <li>OAI - Build Instructions(No E2Agent)</li> <li>OAI - Build Instructions(Flexric)</li> </ul>"},{"location":"RANs/oai/#build-with-flexric","title":"Build with Flexric","text":"<p>In this setup we have used OpenAirInterface built with the --build-e2 flag.</p>"},{"location":"RANs/oai/#0-required-dependencies","title":"0. Required dependencies","text":""},{"location":"RANs/oai/#01-building-swig","title":"0.1 Building Swig","text":"<pre><code>$ git clone https://github.com/swig/swig.git &amp;&amp; cd swig\n$ git checkout release-4.2\n$ ./autogen.sh\n$ ./configure --prefix=/usr/\n$ make -j$(nproc)\n$ sudo make install\n</code></pre>"},{"location":"RANs/oai/#02-installing-other-dependencies","title":"0.2 Installing other dependencies","text":"<pre><code>$ sudo apt install libsctp-dev python3 cmake-curses-gui libpcre2-dev\n</code></pre>"},{"location":"RANs/oai/#1-building-openairinterface","title":"1. Building OpenAirInterface","text":"<pre><code>$ git clone https://gitlab.eurecom.fr/oai/openairinterface5g oai\n$ cd oai\n$ git checkout v2.1.0\n$ ./build_oai -w USRP --gNB --nrUE --build-e2 \n</code></pre>"},{"location":"RANs/oai/#2-building-flexric","title":"2. Building Flexric","text":"<pre><code>$ cd oai/openair2/E2AP/flexric\n$ mkdir build &amp;&amp; cd build\n$ cmake -DSWIG_DIR=/usr/share/swig/4.2.0/ -DSWIG_EXECUTABLE=/usr/bin/swig -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 ..\n$ make -j$(nproc)\n$ sudo make install \n</code></pre>"},{"location":"RANs/oai/#3-launching-gnb","title":"3. Launching gNB","text":""},{"location":"RANs/oai/#31-gnb-configuration","title":"3.1 gNB configuration","text":"<p>First some modifications on the configuration file are required to make the gNB work properly. Some of the configurations bellow are optional depending on your setup.</p> <pre><code>$ cd /path-to/openairinterface5g/targets/PROJECTS/GENERIC-NR-5GC/CONF\n$ vi gnb.sa.band78.fr1.106PRB.usrpb210.conf #in this case we're using the usrp b210.\n</code></pre> <pre><code>tracking_area_code  =  1;\nplmn_list = ({ mcc = 001; mnc = 01; mnc_length = 2; snssaiList = ({ sst = 1; }) }); #in this case we are using the test plmn 00101\n...\nmin_rxtxtime = 6;\n...\namf_ip_address      = ( { ipv4       = \"191.4.205.169\"; #change this to our amf ip; default for oai cn: 192.168.70.132\n                          ipv6       = \"192:168:30::17\";\n                          active     = \"yes\";\n                          preference = \"ipv4\";\n                        }\n                      );\n\n\nNETWORK_INTERFACES :\n    {\n        GNB_INTERFACE_NAME_FOR_NG_AMF            = \"br01\"; #change to our host machine network interface of choice\n        GNB_IPV4_ADDRESS_FOR_NG_AMF              = \"191.4.204.211\"; #change to the ip addr of the interface selected \n        GNB_INTERFACE_NAME_FOR_NGU               = \"br01\"; #change to our host machine network interface of choice\n        GNB_IPV4_ADDRESS_FOR_NGU                 = \"191.4.204.211\"; #change to the ip addr of the interface selected \n        GNB_PORT_FOR_S1U                         = 2152;\n    };\n...\n\ne2_agent = {\n    near_ric_ip_addr = \"191.4.204.161\" #change to to the ip addr of the ric. If you are running flexric locally --&gt; 127.0.0.1\n    sm_dir = \"/usr/local/lib/flexric/\"\n};\n</code></pre>"},{"location":"RANs/oai/#32-running-nr-softmodem","title":"3.2 Running nr-softmodem","text":"<pre><code>$ sudo ./nr-softmodem -O /path-to/gnb.conf --sa -E --continuous-tx | tee oai.logs\n</code></pre>"},{"location":"RANs/oai/#40-f1-2-split","title":"4.0 F1 / 2 Split","text":"<p>First step is to configure both the centralized unit and the distributed unit. The modified configuration that we used can be found here</p>"},{"location":"RANs/oai/#41-configuration-changes-for-the-cu","title":"4.1 Configuration changes for the CU","text":"<pre><code>...\nlocal_s_if_name = \"enp3s0\"; #set this to your network interface\nlocal_s_address = \"191.4.205.149\"; #use 127.0.0.4 with lo interface if trying to run both units in the same computer.\nremote_s_address = \"191.4.204.52\"; #if you are trying to run more than one DU set this to 0.0.0.0 (any).\n...\namf_ip_address = ( {\n    ipv4 = \"192.168.70.132\";\n    ipv6 = \"192:168:30::17\";\n    active = \"yes\";\n    preference = \"ipv4\";\n});\n\n NETWORK_INTERFACES :\n    {\n        GNB_INTERFACE_NAME_FOR_NG_AMF            = \"enp3s0\";\n        GNB_IPV4_ADDRESS_FOR_NG_AMF              = \"191.4.205.149/23\";\n        GNB_INTERFACE_NAME_FOR_NGU               = \"enp3s0\";\n        GNB_IPV4_ADDRESS_FOR_NGU                 = \"191.4.205.149/23\";\n        GNB_PORT_FOR_S1U                         = 2152; # Spec 2152\n    };\n  }\n</code></pre>"},{"location":"RANs/oai/#42-configuration-changes-for-the-du","title":"4.2 Configuration changes for the DU","text":"<pre><code>...\ngNB_ID = 0xe00; #should be the same as the one defined on CU config.\ngNB_DU_ID = 0xe00; #change this if running more than one DU.\n...\n//////// Physical parameters:\nmin_rxtxtime = 6;\n...\nlocal_n_if_name = \"enp3s0\"; #change this to your interface of choice.\nlocal_n_address = \"191.4.204.149\"; #if running more than one DU change this to something different from the other DUs. \nremote_n_address = \"191.4.204.174\"; #change this to your CU ip addr, if local 127.0.0.4.\n</code></pre>"},{"location":"RANs/oai/#43-launching-both-cu-and-du","title":"4.3 Launching both CU and DU","text":"<pre><code>$ sudo ./nr-softmodem -O ~/cu.conf --sa -E --continuous-tx\n$ sudo ./nr-softmodem -O ~/du.conf --sa -E --continuous-tx\n</code></pre>"},{"location":"RANs/srsran/","title":"srsRAN","text":""},{"location":"RANs/srsran/#srsran","title":"srsRAN","text":""},{"location":"RANs/srsran/#1-building","title":"1. Building","text":"<p>Version: 23.10.1 UHD version: 4.6.0.0 OS version: Ubuntu Server 22.04 LTS</p> <p>For building we recommend following the official documentation available here to build srsRAN from source. Do note that modifications such as compiling the ZMQ adaptor can be changed inside de project's <code>CMakeLists.txt</code> or when setting up the cmake build folder. The UHD driver used was built from sources following this guide.</p>"},{"location":"RANs/srsran/#2-running","title":"2. Running","text":"<p>After building and installing srsRAN we recommend running the srsran_performance script available in the official srsran_project repository. Since these changes do not persist remember to re-run them if the machine is restarted.</p> <p>Watchout as srsRAN requires the bind address to be specified whenever trying to connect to an external machine.</p> <p>Finnaly, free5gc and OAI CN require a change in routing table of the gNB host. This change can be applied with the commands:</p> <ul> <li> <p>Free5Gc: <code>sudo ip route add 10.100.200.0/24 via {external addr of the core host} dev {name of the network interface used to reach the core host}</code>.</p> </li> <li> <p>OAI CN: <code>sudo ip route add 10.100.200.0/26 via {external addr of the core host} dev {name of the network interface used to reach the core host}</code>.</p> </li> </ul>"},{"location":"RANs/srsran/#tips-and-tricks","title":"Tips and tricks","text":"<ul> <li>This page is about the srsRAN_5G hosted at srsran/srsran_project NOT the older and to be deprecated srsRAN_4G hosted at srsran/srsRAN_4G. However, the latter is used to simulate UEs as it hosts the srsUE project, at least at the time of writing.</li> <li>You CAN run the srsRAN gNB with multiple simulated UEs using the srsUE project and the ZMQ library. You will have to use GNURadio as well to multiplex the communication sockets (this means that the transport between the UE and gNB is also simulated) though. You can learn more about it here</li> <li>To create a quick setup you can use this. Just read the entire readme before trying to use it.</li> </ul>"},{"location":"RICs/","title":"Non RealTime RIC","text":""},{"location":"RICs/#non-realtime-ric","title":"Non RealTime RIC","text":""},{"location":"RICs/#installation","title":"Installation","text":""},{"location":"RICs/#docker-and-kubernetes-skip-if-already-installed","title":"Docker and kubernetes (skip if already installed)","text":"<p>We installed the non rt ric using kubernetes and containers, to do so we used kubeadm and containerd.</p> <p>We've started with a machine running Ubuntu Desktop 22.04 LTS and installed docker following their own documentation. </p> <p>For our cgroup driver we chose systemd. Our configuration file can be found here. Make sure to install kubectl as well. As our pod network add-on, we picked flannel. Finally we removed the <code>node-role.kubernetes.io/control-plane:NoSchedule</code> taint from all nodes.</p> <p>Now we should have a healthy kubernetes cluster running so its time to deploy the NearRTRIC itself.</p>"},{"location":"RICs/flexric/","title":"Flexric","text":""},{"location":"RICs/flexric/#flexric","title":"Flexric","text":""},{"location":"RICs/flexric/#0-required-dependencies","title":"0. Required dependencies","text":""},{"location":"RICs/flexric/#01-prerequisites","title":"0.1 Prerequisites","text":"<ul> <li>CMake (v &gt;= v3.22)</li> <li>Swig (v &gt;= v.4.1)</li> </ul>"},{"location":"RICs/flexric/#011-building-swig","title":"0.1.1 Building Swig","text":"<pre><code>$ git clone https://github.com/swig/swig.git &amp;&amp; cd swig\n$ git checkout release-4.1\n$ ./autogen.sh\n$ ./configure --prefix=/usr/\n$ make -j$(nproc)\n$ sudo make install\n</code></pre>"},{"location":"RICs/flexric/#02-other-dependencies","title":"0.2 Other dependencies","text":"<pre><code>$ sudo apt install libsctp-dev python3 cmake-curses-gui libpcre2-dev python3-dev\n</code></pre>"},{"location":"RICs/flexric/#10-building-flexric","title":"1.0 Building Flexric","text":"<pre><code>$ git clone https://gitlab.eurecom.fr/mosaic5g/flexric.git\n$ git checkout &lt;*version&gt;\n</code></pre> <p>*For an oai install refer back to oai-flexric. More information can be found at.</p> <pre><code>$ cd flexric\n$ mkdir build &amp;&amp; cd build\n$ cmake -DSWIG_DIR=/usr/share/swig/4.1.0/ -DSWIG_EXECUTABLE=/usr/bin/swig -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILE=g++-10 ..\n$ make -j$(nproc)\n$ sudo make install\n</code></pre>"},{"location":"RICs/flexric/#20-running-flexric","title":"2.0 Running Flexric","text":""},{"location":"RICs/flexric/#21-nearrt-ric","title":"2.1 NearRT-RIC","text":"<pre><code>$ cd build/examples/ric/\n$ ./nearRT-RIC # you can use -c to specify a config file\n</code></pre>"},{"location":"RICs/flexric/#22-running-a-xapp","title":"2.2 Running a xApp","text":"<pre><code>$ cd build/examples/c/monitor/\n$ ./xapp_kpm_moni\n</code></pre>"},{"location":"RICs/oran-sc/","title":"Near RealTime RIC","text":""},{"location":"RICs/oran-sc/#near-realtime-ric","title":"Near RealTime RIC","text":""},{"location":"RICs/oran-sc/#1-installation","title":"1. Installation","text":""},{"location":"RICs/oran-sc/#11-containerd-and-kubernetes-skip-if-already-installed","title":"1.1. Containerd and kubernetes (skip if already installed)","text":"<p>First things first install containerd, kubeadm and kubectl. The cluster configuration passed to kubeadm is available here and the only required modification is under the \"CertSANs\" option you should change to the hostname of your machine. This modification ensures that the self-signed certificates generated by kubeadm will remain valid for your machine after a change in IP address, which is common for us, as long as you as acessing it using its hostname.</p> <p>Note: This will install kubernetes using containerd instead of docker, so the cli for your containers is <code>ctr</code> and the namespace used by kubernetes is <code>k8s.io</code></p>"},{"location":"RICs/oran-sc/#12-step-by-step-kubernetes-setup","title":"1.2. Step by step kubernetes setup","text":"<p>Create the kubernetes cluster using the config.yaml provided. </p><pre><code>kubeadm init --config config.yaml\n</code></pre> <p>Install flannel for networking to work </p><pre><code>kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n</code></pre> <p>Create namespaces in kubernetes </p><pre><code>kubectl create ns ricplt\nkubectl create ns ricxapp\n</code></pre> <p>Remove master taint so everything can run on the same machine </p><pre><code>kubectl taint nodes --all node-role.kubernetes.io/control-plane-\n</code></pre>"},{"location":"RICs/oran-sc/#13-installing-the-near-rt-ric","title":"1.3. Installing the Near-RT RIC","text":"<p>Clone O-RAN SCs <code>ric-dep</code> repository </p><pre><code>git clone \"https://gerrit.o-ran-sc.org/r/ric-plt/ric-dep\"\n</code></pre> <p>Start a chartsmuseum instance (this is a repository for helm charts). </p><pre><code>chartmuseum --debug --port 6873 --storage local --storage-local-rootdir $HOME/helm/chartsmuseum/\n</code></pre> <p>Add a plugin to allow helm to push charts to its chartmuseums</p> <pre><code>helm plugin install https://github.com/chartmuseum/helm-push\n</code></pre> <p>Add the local museum to helm </p><pre><code>helm repo add local http://localhost:6873/\nhelm repo list\n</code></pre> <p>Build the helm charts and upload them to the local chartsmuseum </p><pre><code>cd helm/charts\nmake nearrtric\n</code></pre> <p>Install the RIC using the provided in the ric-dep repository </p><pre><code>helm install nearrtric -n ricplt local/nearrtric -f RECIPE_EXAMPLE/example_recipe_oran_h_release.yaml\n</code></pre>"},{"location":"RICs/oran-sc/#2-building-xapps","title":"2. Building xApps","text":"<p>Here are the instructions to build the modified version of the bouncer xApp used in tests (the one that works with srsRAN 23.10.1). First clone the repository: </p><pre><code>git clone https://github.com/gckopper/bouncer-xapp -b srsRAN-E2 --depth 1\n</code></pre> Note: the <code>-b</code> flag allows you to clone a specific branch, in this case the <code>srsRAN-E2</code> branch, and the <code>--depth 1</code> flag tells git to only clone the latest commit. <p>Then there is a script inside the repository that builds the container image using docker and saves it to containerd internal repository. Building images with ctr is not possible at the moment. Once the image has finished build it is time to deploy it.</p>"},{"location":"RICs/oran-sc/#3-deploying-and-managing-xapps","title":"3. Deploying and managing xApps","text":"<p>To deploy the container image, first clone the official appmgr repository from O-RAN.</p> <pre><code>git clone https://gerrit.o-ran-sc.org/r/ric-plt/appmgr\n</code></pre> <p>This application is used to manage xApps. So lets build it and install it. First we need to go inside the correct folder</p> <pre><code>cd appmgr/xapp_orchestrater/dev/xapp_onboarder\n</code></pre> <p>Create a python virtual environmente to isolate the dependencies of the xApp Onboarder from your system. Just remember that to use this application you'll need to activate the environment using the second command. </p> <p></p><pre><code>python3 -m venv venv3\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre> If you need to deactivate this virtual environment simply use the command <code>deativate</code>. <p>Onboard the xApp. Keep in mind that the typo in <code>shcema</code> is necessary. </p><pre><code>CHART_REPO_URL=http://localhost:6873 dms_cli onboard --config-file-path &lt;path-to-bouncer-xapp&gt;/Bouncer/init/config-file.json --shcema_file_path &lt;path-to-bouncer-xapp&gt;/Bouncer/init/schema.json\n</code></pre> <p>Download the chart you've just created.</p> <pre><code>CHART_REPO_URL=http://localhost:6873 dms_cli download_helm_chart bouncer-xapp 2.0.0\n</code></pre> <p>Install the xApp with helm.</p> <pre><code>helm install bouncer-xapp -n ricxapp bouncer-xapp-2.0.0.tgz\n</code></pre> <p>Once installed you can start and stop the application by scaling its deployment in kubernetes.</p> <pre><code># start xapp\nkubectl scale --replicas=1 -n ricxapp deployment ricxapp-bouncer-xapp\n# stop xapp\nkubectl scale --replicas=0 -n ricxapp deployment ricxapp-bouncer-xapp\n</code></pre> <p>Note: When developing or changing the code for the xApp you may need to update the running version of the container image. To do so re-build the image using the script as that will update the image in your local containerd repository. Then simply scale the xApp deployment down and up and the new version should be running. This will only work if the version stays the same.</p>"},{"location":"UE/simcard/","title":"SIM cards","text":""},{"location":"UE/simcard/#sim-cards","title":"SIM cards","text":"<p>The SIM cards user are made by osmocom so we used their tool to flash new identities to the cards. </p><pre><code>git clone https://github.com/osmocom/pysim\ncd pysim\nsudo apt-get install --no-install-recommends \\\n    pcscd libpcsclite-dev \\\n    python3 \\\n    python3-setuptools \\\n    python3-pyscard \\\n    python3-pip\npip3 install -r requirements.txt\n</code></pre> <p>The values in the card used in our testing was flashed using the following command (note: the <code>-a</code> part is your ADM-KEY and it will differ from ours) </p><pre><code>./pySim-prog.py -p0 -s 8988211000000689615 --mcc=001 --mnc=01 -a 77190612 --imsi=001010123456789  -k 41B7157E3337F0ADD8DA89210D89E17F --opc=1CD638FC96E02EBD35AA0D41EB6F812F\n</code></pre> <p>We also had a seconf simcard with the following configuration</p> <pre><code>imsi: 901700000028080\nk: 724d0f31f2259622700437430b7b5c6e\nopc: 1140620b2805d84b44643bfcfbe6218c\n</code></pre>"}]}